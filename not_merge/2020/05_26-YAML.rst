################################################################################
YAML 标记语言
################################################################################

.. _`JS_YAML`: https://github.com/nodeca/js-yaml
.. _`在线Demo`: ../_static/HtmlAnnex/JS-YAML.html

YAML 是专门用于写配置文件的语言. 以 `JS_YAML`_ 为例, 可以实现 `在线Demo`_ 验证下面的例子.

********************************************************************************
简介
********************************************************************************

YAML 的设计目标, 就是方便人类读写; 它实质上是一种通用的数据串行化格式.

它的基本语法规则如下:

- 大小写敏感.
- 使用缩进表示层级关系.
- 缩进时不允许使用 `Tab` 键, 只允许使用空格.
- 缩进的空格数目不重要, 只要相同层级的元素左侧对齐即可.

YAML支持 **注释**, 使用 `#` 表示注释, 从这个字符一直到行尾, 都会被当作注释.

YAML 支持三种数据结构:

- `对象`_ 键值对的集合, 又称为 *映射* (mapping) / *哈希* (hashes) / *字典* (dictionary).
- `数组`_ 一组按次序排列的值, 又称为 *序列* (sequence) / *列表** (list).
- `纯量`_ (scalars), 单个的, 不可再分的值.

********************************************************************************
对象
********************************************************************************

#. 对象的一组键值对, 使用 **冒号** 结构来表示:

   ``animal : pets`` 转化为 *JavaScript* 则为: ``{animal : 'pets'}``.

#. 对象支持行内表示法, 即将所有键值对的写成行内对象:

   ``hash : {name : Steve, foo : bar}`` 转化成 *JavaScript* 则为: ``{hash : {name : 'Steve', foo : 'bar'}}``

********************************************************************************
数组
********************************************************************************

#. 数组, 使用一组 **连词线** 开头的行来表示:

   .. code-block:: YAML
   
     - Cat
     - Dog
     - Goldfish
 
   转化为 *JavaScript* 则为: ``['Cat', 'Dog', 'Goldfish']``.

#. 数组中元素也是数组, 使用 **缩进一个空格** 来表示层级关系:

   .. code-block:: YAML
 
     - Birds
      - Cat
      - Dog
      - Goldfish
 
   转化成 *JavaScript* 则为: ``['Birds', ['Cat', 'Dog', 'Goldfish']]``.

#. 数组也支持行内表示法:

   ``animal : [Cat, Dog]`` 转化成 *JavaScript* 则为: ``{animal : ['Cat', 'Dog']}``.


********************************************************************************
复合结构
********************************************************************************

`对象`_ 和 `数组`_ 可以结合使用, 形成 **复合结构**; 例如:

  .. code-block:: YAML

      language:
       - Ruby
       - Perl
       - Python
      websites:
       YAML : yaml.ory
       Ruby : ruby-lang.org
       Python : python.org
       Perl : use.perl.org

  转化成 *JavaScript* 则为:

  .. code-block:: JavaScript

      {
        language : ['Ruby', 'Perl', 'Python'],
        websites:
          {
            YAML : 'yaml.org'
            Ruby : 'ruby-lang.org'
            Python : 'python.org'
            Perl : 'user.perl.org'
          }
      }


********************************************************************************
纯量
********************************************************************************

纯量是最基本的, 不可再分的值. 以下数据类型都属于 *JavaScript* 的纯量:

  - `字符串`_.
  - 布尔值 : ``true``, ``false``.
  - 整数.
  - 浮点数.
  - Null : 使用 ``~`` 来表示, **Tab** 键上方的键, 按住 **Shift** 输入.
  - 时间. 采用 **ISO8601** 格式.
  - 日期. 采用 **ISO8601** 格式的 **年月日** 来表示.

  ``parent : ~`` 转化成 *JavaScript* 则为: ``{parent : null}``.

  ``iso8601: 2001-12-14t21:59:43.100-05:00`` 转化成 *JavaScript* 则为: ``{iso8601 : new Data('2001-12-14t21:59:43.10-05:00}``.

  ``date: 1976-07-31`` 转化成 *JavaScript* 则为: ``{date : new Date('1976-07-31')}``

  使用 **!!** (两个感叹号), 强制转化数据类型:
  ``e : !!str 123`` 转化成 *JavaScript* 则为: ``{e : '123'}``, ``f: !!str true`` 转化成 *JavaScript* 则为: ``{f : 'true`}``.


********************************************************************************
字符串
********************************************************************************

#. 字符串, 默认不使用 **双引号** 表示, 如: ``str: 这是一行字符串``.

#. 如果包含 **空格** 或 **特殊字符**, 需要放到引号中, 如 ``str: '这是 一行字符串.'``.

#. **单引号** 和 **双引号** 都可以使用, **双引号** 不会对特殊字符进行 **转义**:

   ``s1: '内容\n字符串'`` 转换成 *JavaScript*, 则为 ``{s1: '内容\\n字符串'}``.
   
   ``s2: "内容\n字符串"`` 转换成 *JavaScript*, 则为 ``{s2: '内容\n字符串'}``.

#. 如果 **单引号** 中还有 **单引号**, 必须使用 **两个** 的单引号进行转义:
  
   ``str: 'labor''s day`` 转换成 *JavaScript*, 则为: ``{str: 'labor\'s day}``.

#. 字符串可以写成多行, 从第二行开始, 必须有一个空格缩进. 默认 **换行符** 会转成 **空格**.

   .. code-block:: YAML

       str: 这是一段
        多行
        字符串.

   转换成 *JavaScript*, 则为: ``{str: '这是一段 多行 字符串'}``.

   多行字符串, 可以使用 **|** 来强制保留换行符, 不自动替换成空格; 也可以使用 **>** 折叠换行符(只保留字符串末尾的换行符):

   .. code-block: YAML

       str1: |
        a
        b
        c
       str2: >
        d
        e
        f

    转换成 *JavaScript*, 则为: ``{str1: 'a\nb\nc\nd', str2: 'd e f\n'}``.

   多行字符串, 可以使用 **+** 来强制保留字符串末尾的换行符, 使用 **-** 来强制删除字符串末尾的换行符. 

#. 字符串中可插入 **HTML标记**.


********************************************************************************
引用
********************************************************************************

``&`` (锚点), ``*`` (别名); 示例如下:

  .. code-block:: YAML
 
      defaults: &defaults
        adapter:  postgres
        host:     localhost

      development:
        database: myapp_development
        <<: *defaults
    
      test:
        database: myapp_test
        <<: *defaults

等同于下面的代码:

  .. code-block:: YAML

      defaults:
        adapter:  postgres
        host:     localhost
      
      development:
        database: myapp_development
        adapter:  postgres
        host:     localhost
      
      test:
        database: myapp_test
        adapter:  postgres
        host:     localhost
